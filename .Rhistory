cov.mat<- matrix(0, nrow=nosP, ncol=7)
for (i in 1:nrow(tempD)){ # the number of pixels
cntj<- 1
for (j in 4:ncol(tempD)){ #for each column
dd<- tempD[i,j]
for (k in 1:nosP){  #for each quantile
kl<- q.mat[k, cntj]
ku<- q.mat[k+1, cntj]
if (dd >= kl & dd <= ku){cov.mat[k, cntj]<- cov.mat[k, cntj] + 1}
}
cntj<- cntj+1
}
}
cov.mat[which(cov.mat==0)]<- 0.000001 # very small number so we dont have to deal with zeros
# covariate data density
covDens<- cov.mat/nrow(tempD)
################################################################################
#Point data (the exisitng points)
dat<- read.table("HunterValley_SiteObsAll.txt", header = T,sep = ",")  # existing soil point data
#extract covariate data at points
coordinates(dat)<- ~ X +Y
DSM_data<- extract(s1,dat, sp= 1, method = "simple") #extract
dat<- as.data.frame(DSM_data)
dat<- dat[complete.cases(dat),]
#Point dat (little data manipulations)
dat<- dat[,c(2,3,4,6:ncol(dat))]
names(dat)[1:3]<- c("x", "y", "cellNos")
dat$cellNos<- 0
str(dat)
# Count of sample sample data for each covariate quantile
# essentially the same as what was done for the gridded covariate data
h.mat<- matrix(0, nrow=nosP, ncol=7)
for (i in 1:nrow(dat)){ # the number of observations
cntj<- 1
for (j in 4:ncol(dat)){ #for each column
dd<- dat[i,j]
for (k in 1:nosP){  #for each quantile
kl<- q.mat[k, cntj]
ku<- q.mat[k+1, cntj]
if (dd >= kl & dd <= ku){h.mat[k, cntj]<- h.mat[k, cntj] + 1}
}
cntj<- cntj+1
}
}
#density
h.mat[which(h.mat==0)]<- 0.000001  # small number so we dont have to deal with zeros
datDens<-h.mat/nrow(dat) # data density
rat<- datDens/covDens # ratio of data density and covariate density
or<- order(rat) # rank the index where the biggest discrepancy is at the top
## indexes of quantiles that are not adequately sampled ie where rat is less than 1
l1<- which(rat < 1, arr.ind = T)
l1<- cbind(l1,which(rat < 1) )
length(rat) # total number of quantiles
nrow(l1) # number of quanitles where there is a discrepancy
#start from the highest discrepancy then work our way down
upSamp<- nosP
rpos<- 1
base<- 3 # constant so that covariate columns are easily to select (related to the column positions of the covariates in the tempD data frame)
while (upSamp != 0){  # while the number of samples to allocate is greater than 0
# quantile position where the discrepancy is
indy<- which(l1[,3]==or[rpos])
rp<- l1[indy, 1]
rc<- l1[indy, 2]
ex<- floor(nrow(dat) * (datDens[rp,rc])) #existing count of samples within the selected quantile
eq<- ceiling(nrow(dat) * (covDens[rp,rc])) # number of samples needed to get to equal density between data and covariates
sn<- eq-ex #number of samples needed
if (upSamp < sn) {sn <- upSamp} # just so we dont over allocate
#covariate selection
covL<- q.mat[rp, rc]
covU<- q.mat[rp+1, rc]
subDat<- tempD[tempD[,(base+rc)] >= covL & tempD[,(base+rc)] <= covU,] # subset the covariates that meet the standard
training <- sample( nrow(subDat), sn) #random number
subDat2<- subDat[training,]
#remove selected samples from tempD so that repeated sampling does not occur (Is this necessary??)
tempD<- tempD[!(tempD$cellNos %in% subDat2$cellNos), ]
# Append new data to sampling dataframe
dat<- rbind(dat,subDat2)
#adjust the while params
rpos<- rpos + 1 # move to next largest discrepancy
upSamp<- upSamp - sn # update the required sample number
print(sn)}
# Specify the different surveys (original and addtional)
dat$survey<- NA
nrow(dat)
# Specify the different surveys (original and addtional)
dat$survey<- NA
str(dat)
# Specify the different surveys (original and addtional)
dat$survey<- NA
str(dat)
dat[dat$cellNos==0,"survey"]<- 1
dat[dat$cellNos!=0,"survey"]<- 2
saveRDS(dat, file = "hels_datout.rds")
## Spatial points
coordinates(dat) <- ~x + y
str(dat)
## Coordinate reference systems
proj4string(dat) <- CRS("+init=epsg:32756")
dat@proj4string
## Write point data to shapefile
writeOGR(dat, ".", "HV_dat_shape", "ESRI Shapefile")
#raster extraction
#covariates
r1<- raster("sampleNos.tif")
DSM_data2<- extract(r1,dat, sp= 1, method = "simple")
# Doing some summary statistics between the raster grid values and the sample sites for both original and addtional data
#Exisitng sample data
dat1<- DSM_data2[DSM_data2$survey ==1, ]
sum(dat1$sampleNos >= 0 & dat1$sampleNos <= 5) / nrow(dat1)
sum(dat1$sampleNos > 5 & dat1$sampleNos <= 10) / nrow(dat1)
sum(dat1$sampleNos > 10 & dat1$sampleNos <= 20) / nrow(dat1)
sum(dat1$sampleNos > 20 & dat1$sampleNos <= 40) / nrow(dat1)
sum(dat1$sampleNos > 40) / nrow(dat1)
# additional sample
dat2<- DSM_data2[DSM_data2$survey !=1, ]
sum(dat2$sampleNos >= 0 & dat2$sampleNos <= 5) / nrow(dat2)
sum(dat2$sampleNos > 5 & dat2$sampleNos <= 10) / nrow(dat2)
sum(dat2$sampleNos > 10 & dat2$sampleNos <= 20) / nrow(dat2)
sum(dat2$sampleNos > 20 & dat2$sampleNos <= 40) / nrow(dat2)
sum(dat2$sampleNos > 40) / nrow(dat2)
# Required R Packages
library(sp)
library(raster)
library(rgdal)
#data
setwd("Z:/Dropbox/2019/rmuddles/clhs_addtion")
tempD<- readRDS("tempD.rds")
#rasterise covariate data
s1<- stack()
for (i in 4:ncol(tempD)){
r1<- rasterFromXYZ(tempD[,c(1,2,i)])
names(r1)<- names(tempD[i])
s1<- stack(s1,r1)
}
s1
#tabulate (as i want the cell number)
tempD <- data.frame(cellNos = seq(1:ncell(s1)))
vals <- as.data.frame(getValues(s1))
tempD<- cbind(tempD, vals)
tempD <- tempD[complete.cases(tempD), ]
cellNos <- c(tempD$cellNos)
gXY <- data.frame(xyFromCell(s1, cellNos, spatial = FALSE))
tempD<- cbind(gXY, tempD)
#rasterise again
s1<- stack()
for (i in 3:ncol(tempD)){
r1<- rasterFromXYZ(tempD[,c(1,2,i)])
names(r1)<- names(tempD[i])
s1<- stack(s1,r1)
}
s1
#Point data (the exisitng sample point data)
dat<- read.table("HunterValley_SiteObsAll.txt", header = T,sep = ",")  # existing soil point data
#extract covariate data at points
coordinates(dat)<- ~ X +Y
DSM_data<- raster::extract(s1,dat, sp= 1, method = "simple") #extract
dat<- as.data.frame(DSM_data)
dat<- dat[complete.cases(dat),]
# Raster Data
str(tempD)
# Sample site data
str(dat)
#remove the grid points where there is point data
tempD<- tempD[-which(tempD$cellNos %in% dat$cellNos),]
## combine grid data with the observed data
dat.sub<- dat[,c(2,3,6:13)]
names(dat.sub)[1:2]<- c("x", "y")
tempD.new<- rbind(dat.sub, tempD)
tempD.new$type<- NA
tempD.new$type[1:nrow(dat.sub)]<- "orig"
tempD.new$type[(nrow(dat.sub)+1):nrow(tempD.new)]<- "possibles"
## combine grid data with the observed data
dat.sub<- dat[,c(2,3,6:13)]
names(dat.sub)[1:2]<- c("x", "y")
tempD.new<- rbind(dat.sub, tempD)
tempD.new$type<- NA
tempD.new$type[1:nrow(dat.sub)]<- "orig"
tempD.new$type[(nrow(dat.sub)+1):nrow(tempD.new)]<- "possibles"
## clhs sampling with fixed obs and add an extra 100 sites
library(clhs)
## clhs sampling with fixed obs and add an extra 100 sites
library(clhs)
nosP<- 100 # number of additional sites
# run clhs function
res <- clhs(x = tempD.new[,c(4:10)],
size = nrow(dat.sub) + nosP,
iter = 10000,
progress = TRUE,
simple = TRUE,
include = c(1:nrow(dat.sub)))
res<- readRDS(file = "Z:/Dropbox/2019/rmuddles/clhs_addtion/clhs_res.rds")
# get the selected data
dat.sel<- tempD.new[res,]
saveRDS(dat.sel, file = "clhs_datout.rds")
str(dat.sel)
dat.sel
dat.sel$type
#data
setwd("Z:/Dropbox/2019/rmuddles/clhs_addtion")
# Required R Packages
library(sp)
library(raster)
library(rgdal)
library(leaflet)
library(magrittr)
library(htmlwidgets)
### Raster map
r1<- raster("sampleNos.tif")
r1
library(RColorBrewer)
## #Colour ramp
pal2 <- colorNumeric(
brewer.pal(n = 9, name = "BlGrYl"),
domain = values(r1),
na.color = "transparent")
?brewer.pal
## #Colour ramp
pal2 <- colorNumeric(
brewer.pal(n = 10, name = "YlGnBu"),
domain = values(r1),
na.color = "transparent")
## #Colour ramp
pal2 <- colorNumeric(
brewer.pal(n = 9, name = "YlGnBu"),
domain = values(r1),
na.color = "transparent")
## #interactive map
m3<- leaflet() %>%
addProviderTiles("Esri.WorldImagery") %>%
addRasterImage(r1, colors = pal2, opacity = 0.4) %>%
addLegend("topright", opacity=0.4, pal = pal2, values = values(r1),
title = "COOBS")
r1<- projectRaster(r1, crs= "+init=epsg:4326",method="ngb", res=0.001)
r1
crs(r1)
crs(r1)<- "+init=epsg:32756"
r1<- projectRaster(r1, crs= "+init=epsg:4326",method="ngb", res=0.001)
r1
### Raster map
r1<- raster("sampleNos.tif")
crs(r1)<- "+init=epsg:32756"
r1<- projectRaster(r1, crs= "+init=epsg:4326",method="ngb", res=0.0001)
r1
## #Colour ramp
pal2 <- colorNumeric(
brewer.pal(n = 9, name = "YlGnBu"),
domain = values(r1),
na.color = "transparent")
## #interactive map
m3<- leaflet() %>%
addProviderTiles("Esri.WorldImagery") %>%
addRasterImage(r1, colors = pal2, opacity = 0.4) %>%
addLegend("topright", opacity=0.4, pal = pal2, values = values(r1),
title = "COOBS")
m3
#size appropriately
m3$height<- 500
m3$width<- 700
### Save the HTML widget
saveWidget(m3, file="Z:/rdev/site_source/_includes/htmlwidgets/coobs.html")
# Point data
dat.sel<- readRDS("clhs_datout.rds") #clhs
getwd()
dat<- readRDS("Z:/Dropbox/2019/rmuddles/clhs_addtion/hels_datout.rds") #adapted hels
#extracts raster values at points
# extract coobs dat
coordinates(dat.sel)<- ~ x + y
dat.sel<- extract(r1,dat.sel, sp= 1, method = "simple")
dat.sel<- raster::extract(r1,dat.sel, sp= 1, method = "simple")
# extract clhs dat
coordinates(dat)<- ~ x + y
dat<- raster::extract(r1,dat, sp= 1, method = "simple")
dat.sel.1<- dat.sel[101:432, ]
dat.sel.1<- dat.sel[101:432, ]
sum(dat.sel.1$sampleNos >= 0 & dat.sel.1$sampleNos <= 5) / nrow(dat.sel.1) # very low coobs
dat.sel.1
dat.sel.1<- as.data.frame(dat.sel[101:432, ])
sum(dat.sel.1$sampleNos >= 0 & dat.sel.1$sampleNos <= 5) / nrow(dat.sel.1) # very low coobs
# Load the relevant bits of data
# raster
## coobs raster surface
r1<- raster("sampleNos.tif")
# Point data
dat.sel<- readRDS("Z:/Dropbox/2019/rmuddles/clhs_addtion/clhs_datout.rds") #clhs
# Load the relevant bits of data
# raster
## coobs raster surface
r1<- raster("Z:/Dropbox/2019/rmuddles/clhs_addtion/sampleNos.tif")
# Point data
dat.sel<- readRDS("Z:/Dropbox/2019/rmuddles/clhs_addtion/clhs_datout.rds") #clhs
dat<- readRDS("Z:/Dropbox/2019/rmuddles/clhs_addtion/hels_datout.rds") #adapted hels
#extracts raster values at points
# extract clhs dat
coordinates(dat.sel)<- ~ x + y
dat.sel<- raster::extract(r1,dat.sel, sp= 1, method = "simple")
# extract clhs dat
coordinates(dat)<- ~ x + y
dat<- raster::extract(r1,dat, sp= 1, method = "simple")
dat.sel.1<- as.data.frame(dat.sel[101:432, ])
sum(dat.sel.1$sampleNos >= 0 & dat.sel.1$sampleNos <= 5) / nrow(dat.sel.1) # very low coobs
sum(dat.sel.1$sampleNos > 5 & dat.sel.1$sampleNos <= 10) / nrow(dat.sel.1) # low coobs
sum(dat.sel.1$sampleNos > 10 & dat.sel.1$sampleNos <= 20) / nrow(dat.sel.1) # moderate coobs
sum(dat.sel.1$sampleNos > 20 & dat.sel.1$sampleNos <= 40) / nrow(dat.sel.1) # high coobs
sum(dat.sel.1$sampleNos > 40) / nrow(dat.sel.1) # quite high coobs
dat.sel.2<- as.data.frame(dat.sel[1:100, ])
sum(dat.sel.2$sampleNos >= 0 & dat.sel.2$sampleNos <= 5) / nrow(dat.sel.2) # very low coobs
sum(dat.sel.2$sampleNos > 5 & dat.sel.2$sampleNos <= 10) / nrow(dat.sel.2) # low coobs
sum(dat.sel.2$sampleNos > 10 & dat.sel.2$sampleNos <= 20) / nrow(dat.sel.2) # moderate coobs
sum(dat.sel.2$sampleNos > 20 & dat.sel.2$sampleNos <= 40) / nrow(dat.sel.2) # high coobs
sum(dat.sel.2$sampleNos > 40) / nrow(dat.sel.2) # quite high coobs
dat.2<- dat[dat$survey !=1, ]
dat.2<- dat[dat$survey !=1, ]
sum(dat.2$sampleNos >= 0 & dat.2$sampleNos <= 5) / nrow(dat.2)
sum(dat.2$sampleNos > 5 & dat.2$sampleNos <= 10) / nrow(dat.2)
sum(dat.2$sampleNos > 10 & dat.2$sampleNos <= 20) / nrow(dat.2)
sum(dat.2$sampleNos > 20 & dat.2$sampleNos <= 40) / nrow(dat.2)
sum(dat.2$sampleNos > 40) / nrow(dat.2)
#
dat<- readRDS("hels_datout.rds")
str(dat)
coordinates(dat)<- ~ x + y
## Coordinate reference systems
proj4string(dat) <- CRS("+init=epsg:32756")
## Coordinate transformation
dat <- spTransform(dat, CRS("+init=epsg:4326"))
str(dat)
dat$survey
dat$survey==1
dat$survey[1:332]
dat$survey[1:332]<- "existing"
dat$survey[1:332]<- "existing"
dat$survey[333:432]<- "additional"
# Create a palette that maps factor levels to colors
pal <- colorFactor(c("red", "black"), domain = c("existing", "additional"))
leaflet(dat) %>%
addTiles(group = "OSM (default)") %>%
addProviderTiles("Esri.WorldImagery") %>%
addCircleMarkers(
radius = ~ifelse(sampType == "new", 10, 6),
color = ~pal(sampType),
stroke = FALSE, fillOpacity = 0.5) %>%
addLegend("bottomright", pal = pal, values = dat$sampType,
title = "sample type",
opacity = 0.5) %>%
addLayersControl(
baseGroups = c("OSM (default)", "Imagery"))
leaflet(dat) %>%
addTiles(group = "OSM (default)") %>%
addProviderTiles("Esri.WorldImagery") %>%
addCircleMarkers(
radius = ~ifelse(sampType == "new", 10, 6),
color = ~pal(sampType),
stroke = FALSE, fillOpacity = 0.5) %>%
addLegend("bottomright", pal = pal, values = dat$survey,
title = "sample type",
opacity = 0.5) %>%
addLayersControl(
baseGroups = c("OSM (default)", "Imagery"))
leaflet(dat) %>%
addTiles(group = "OSM (default)") %>%
addProviderTiles("Esri.WorldImagery") %>%
addCircleMarkers(
radius = ~ifelse(survey == "new", 10, 6),
color = ~pal(survey),
stroke = FALSE, fillOpacity = 0.5) %>%
addLegend("bottomright", pal = pal, values = dat$survey,
title = "sample type",
opacity = 0.5) %>%
addLayersControl(
baseGroups = c("OSM (default)", "Imagery"))
leaflet(dat) %>%
addTiles(group = "OSM (default)") %>%
addProviderTiles("Esri.WorldImagery") %>%
addCircleMarkers(data = dat, group = "clhs points",
radius = ~ifelse(survey == "new", 10, 6),
color = ~pal(survey),
stroke = FALSE, fillOpacity = 0.5) %>%
addLegend("bottomright", pal = pal, values = dat$survey,
title = "sample type",
opacity = 0.5) %>%
addRasterImage(r1, colors = pal2,group = "COOBS",
opacity = 0.8) %>%
addLayersControl(
baseGroups = c("OSM (default)", "Imagery"),
overlayGroups = c("clhs points", "raster"))
r1
### Raster map
r1<- raster("sampleNos.tif")
crs(r1)<- "+init=epsg:32756"
r1<- projectRaster(r1, crs= "+init=epsg:4326",method="ngb", res=0.0001)
r1
## #Colour ramp
pal2 <- colorNumeric(
brewer.pal(n = 9, name = "YlGnBu"),
domain = values(r1),
na.color = "transparent")
#
dat<- readRDS("hels_datout.rds")
str(dat)
coordinates(dat)<- ~ x + y
## Coordinate reference systems
proj4string(dat) <- CRS("+init=epsg:32756")
## Coordinate transformation
dat <- spTransform(dat, CRS("+init=epsg:4326"))
str(dat)
dat$survey[1:332]<- "existing"
dat$survey[333:432]<- "additional"
# Create a palette that maps factor levels to colors
pal <- colorFactor(c("red", "black"), domain = c("existing", "additional"))
leaflet(dat) %>%
addTiles(group = "OSM (default)") %>%
addProviderTiles("Esri.WorldImagery") %>%
addCircleMarkers(data = dat, group = "adapted HELS points",
radius = ~ifelse(survey == "new", 10, 6),
color = ~pal(survey),
stroke = FALSE, fillOpacity = 0.5) %>%
addLegend("bottomright", pal = pal, values = dat$survey,
title = "sample type",
opacity = 0.5) %>%
addRasterImage(r1, colors = pal2,group = "COOBS",
opacity = 0.8) %>%
addLayersControl(
baseGroups = c("OSM (default)", "Imagery"),
overlayGroups = c("clhs points", "raster"))
# clhs data
dat.sel<- readRDS("clhs_datout.rds")
str(dat.sel)
coordinates(dat.sel)<- ~ x + y
## Coordinate reference systems
proj4string(dat.sel) <- CRS("+init=epsg:32756")
## Coordinate transformation
dat.sel <- spTransform(dat.sel, CRS("+init=epsg:4326"))
## Coordinate transformation
dat.sel <- spTransform(dat.sel, CRS("+init=epsg:4326"))
str(dat.sel)
dat.sel$type[1:100]<- "additional"
dat.sel$type[101:432]<- "existing"
# Create a palette that maps factor levels to colors
pal3 <- colorFactor(c("red", "black"), domain = c("existing", "additional"))
leaflet(dat) %>%
addTiles(group = "OSM (default)") %>%
addProviderTiles("Esri.WorldImagery") %>%
addCircleMarkers(data = dat, group = "adapted HELS points",
radius = ~ifelse(survey == "new", 10, 6),
color = ~pal(survey),
stroke = FALSE, fillOpacity = 0.5) %>%
addLegend("bottomright", pal = pal, values = dat$survey,
title = "sample type",
opacity = 0.5) %>%
addCircleMarkers(data = dat.sel, group = "clhs points",
radius = ~ifelse(type == "additional", 10, 6),
color = ~pal(type),
stroke = FALSE, fillOpacity = 0.5) %>%
addLegend("bottomright", pal = pal3, values = dat.sel$type,
title = "sample type",
opacity = 0.5) %>%
addRasterImage(r1, colors = pal2,group = "COOBS",
opacity = 0.8) %>%
addLegend("topright", opacity=0.4, pal = pal2, values = values(r1),
title = "COOBS") %>%
addLayersControl(
baseGroups = c("OSM (default)", "Imagery"),
overlayGroups = c("adapted HELS points","clhs points", "raster"))
leaflet(dat) %>%
addTiles(group = "OSM (default)") %>%
addProviderTiles("Esri.WorldImagery") %>%
addCircleMarkers(data = dat, group = "adapted HELS points",
radius = ~ifelse(survey == "new", 10, 6),
color = ~pal(survey),
stroke = FALSE, fillOpacity = 0.5) %>%
addLegend("bottomright", pal = pal, values = dat$survey,
title = "sample type",
opacity = 0.5) %>%
addCircleMarkers(data = dat.sel, group = "clhs points",
radius = ~ifelse(type == "additional", 10, 6),
color = ~pal(type),
stroke = FALSE, fillOpacity = 0.5) %>%
addRasterImage(r1, colors = pal2,group = "COOBS",
opacity = 0.8) %>%
addLegend("topright", opacity=0.4, pal = pal2, values = values(r1),
title = "COOBS") %>%
addLayersControl(
baseGroups = c("OSM (default)", "Imagery"),
overlayGroups = c("adapted HELS points","clhs points", "COOBS"))
m4<- leaflet(dat) %>%
addTiles(group = "OSM (default)") %>%
addProviderTiles("Esri.WorldImagery") %>%
addCircleMarkers(data = dat, group = "adapted HELS points",
radius = ~ifelse(survey == "new", 10, 6),
color = ~pal(survey),
stroke = FALSE, fillOpacity = 0.5) %>%
addLegend("bottomright", pal = pal, values = dat$survey,
title = "sample type",
opacity = 0.5) %>%
addCircleMarkers(data = dat.sel, group = "clhs points",
radius = ~ifelse(type == "additional", 10, 6),
color = ~pal(type),
stroke = FALSE, fillOpacity = 0.5) %>%
addRasterImage(r1, colors = pal2,group = "COOBS",
opacity = 0.8) %>%
addLegend("topright", opacity=0.4, pal = pal2, values = values(r1),
title = "COOBS") %>%
addLayersControl(
baseGroups = c("OSM (default)", "Imagery"),
overlayGroups = c("adapted HELS points","clhs points", "COOBS"))
#size appropriately
m4$height<- 500
m4$width<- 700
### Save the HTML widget
saveWidget(m4, file="C:/rdev/site_source/_includes/htmlwidgets/HELS_fin.html")
### Save the HTML widget
saveWidget(m4, file="Z:/rdev/site_source/_includes/htmlwidgets/HELS_fin.html")
